# '(' 와 ')' 로만 이루어진 문자열이 있을 경우, '(' 의 개수와 ')' 의 개수가 같다면 이를 균형잡힌 괄호 문자열이라고 부릅니다.
# 그리고 여기에 '('와 ')'의 괄호의 짝도 모두 맞을 경우에는 이를 올바른 괄호 문자열이라고 부릅니다.
# 예를 들어, "(()))("와 같은 문자열은 "균형잡힌 괄호 문자열" 이지만 "올바른 괄호 문자열"은 아닙니다.
# 반면에 "(())()"와 같은 문자열은 "균형잡힌 괄호 문자열" 이면서 동시에 "올바른 괄호 문자열" 입니다.

# '(' 와 ')' 로만 이루어진 문자열 w가 "균형잡힌 괄호 문자열" 이라면 다음과 같은 과정을 통해 "올바른 괄호 문자열"로 변환할 수 있습니다.

# 1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 
# 2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 
# 3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
#   3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
# 4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
#   4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
#   4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
#   4-3. ')'를 다시 붙입니다. 
#   4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
#   4-5. 생성된 문자열을 반환합니다.
# "균형잡힌 괄호 문자열" p가 매개변수로 주어질 때, 주어진 알고리즘을 수행해 "올바른 괄호 문자열"로 변환한 결과를 return 하도록 solution 함수를 완성해 주세요.

# 매개변수 설명
# p는 '(' 와 ')' 로만 이루어진 문자열이며 길이는 2 이상 1,000 이하인 짝수입니다.
# 문자열 p를 이루는 '(' 와 ')' 의 개수는 항상 같습니다.
# 만약 p가 이미 "올바른 괄호 문자열"이라면 그대로 return 하면 됩니다.

# 입출력 예
# p	result
# "(()())()"	"(()())()"
# ")("	"()"
# "()))((()"	"()(())()"

# 괄호 쌍이 맞는 최소 인덱스 찾기
def balanced_index(p):
    count = 0
    for i in range(len(p)): 
        if p[i] == '(':
            count += 1
        else:
            count -= 1
        # 괄호 갯수가 딱맞는곳 까지의 인덱스 반환
        if count == 0:
            return i
        
# 괄호 열고 닫음이 적절한지 확인,  balanced_index가 선행
def check_proper(p):
    count = 0
    for i in p:
        if i == '(': # balanced_index가 선행되어 ((((()) 는 일어나지
            count += 1
        else:
            if count == 0:
                return False # 아예 ) 부터 시작하거나, 괄호를 닫아야하는데 이미 모든 괄호가 닫혀있어서  ( 가 선행되지 않은 )가 나타나면 False
            count -= 1 
    return True


def solution(p):
    answer = ''
    if p == '':
        return answer
    index = balanced_index(p)
    u = p[:index + 1]
    v = p[index + 1:]
    # 올바른 문자열이면 answer에 add 하고 나머지 문자열을 다시 solution
    if check_proper(u):
        answer = u + solution(v)
    else:
        answer = '('
        answer += solution(v) # 아직 정렬 안된건 다시 solution --> answer = ( + "정렬 예정인 v" + ) + "괄호 뒤집은 u에서 양옆 제거"
        answer += ')'
        u = list(u[1:-1]) # 처음과 마지막 문자 제거--> 무조건 처음과 끝이 같은 문자가 아님
        for i in range(len(u)):
            # 쌍의 개수는 맞는데 정렬이 안되있는 상태의 문자열이라면 괄호 반전만 하면 괄호 여닫음도 맞음 ex. (()) 와 같은 문자열은 애초에 이 루프까지 들어오지 않음
            if u[i] == '(':
                u[i] =')'
            else:
                u[i] = '('

        answer += "".join(u)
    return answer


p = input()
print(solution(p))
